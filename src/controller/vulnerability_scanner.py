from concurrent.futures.thread import ThreadPoolExecutor
import requests
from bs4 import BeautifulSoup
from rich.console import Console  # Corrección aquí
from rich.table import Table


class VulnerabilityScanner:
    def __init__(self):
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'
        }

    def search_cves(self, service):
        url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?KeywordSearch={service}"

        response = requests.get(url, headers=self.headers)

        if response.status_code != 200:
            return "no se pudo obtener información de las vulnerabilidades"

        data_dict = response.json()
        cves_info = []

        for vulnerability in data_dict.get('vulnerabilities', []):
            cve = vulnerability.get('cve', {})
            cve_id = cve.get('id')
            descriptions = cve.get('descriptions', [])
            description = next((desc['value'] for desc in descriptions if desc.get('lang') == 'es'), None)

            if cve_id and description:
                cves_info.append({
                    'cve_id': cve_id,
                    'description': description
                })

        with ThreadPoolExecutor(max_workers=20) as executor:
            executor.map(self.search_cve_details, cves_info)

        return cves_info

    def search_cve_details(self, cve_info):
        cve_details_url = f'https://www.cvedetails.com/cve/{cve_info["cve_id"]}/'
        response = requests.get(cve_details_url, headers=self.headers)
        if response.status_code == 200:
            soup = BeautifulSoup(response.content, 'html.parser')

            cvss_info = soup.find('div', {'class': 'cvssbox'})
            cve_info['cvss'] = cvss_info.getText().strip() if cvss_info else 'No disponible'
            cve_info['url'] = cve_details_url  # Corrección: era cvss_info['url']

    @staticmethod
    def pretty_print(cves_details):
        console = Console()
        table = Table(title="Vulnerabilidades encontradas")
        table.add_column("CVE ID", style="cyan", no_wrap=True)
        table.add_column("Description", style="magenta")
        table.add_column("CVSS", style="green")  # Corrección: 'gree' -> 'green'
        table.add_column("URL", style="blue")

        for cve in cves_details:
            try:
                cve['cvss'] = float(cve['cvss'])
            except (ValueError, TypeError):
                cve['cvss'] = 0.0

        cves_info_sorted = sorted(cves_details, key=lambda x: x['cvss'],
                                  reverse=True)  # Corrección: reverse=True para ordenar de mayor a menor

        for cve in cves_info_sorted:
            cvss_str = str(cve['cvss']) if cve['cvss'] != 0.0 else "No disponible"
            table.add_row(
                cve['cve_id'],
                cve['description'] or "no disponible",
                cvss_str,
                cve.get('url', "no disponible"),  # Usar .get() para evitar KeyError
                end_section=True
            )
        console.print(table)